Q1. Given an array. FInd the number X in the array. If the element is present, return the index of the element,
else print “Element not found in array”. Input the size of array, array from user and the element X from user.
Use Linear Search to find the element.
ANS:-import java.util.Scanner;

public class LinearSearch {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the size of the array
        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Input the elements of the array
        int[] arr = new int[size];
        System.out.print("Enter the elements of the array separated by space: ");
        for (int i = 0; i < size; i++) {
            arr[i] = scanner.nextInt();
        }

        // Input the element to search
        System.out.print("Enter the element to search: ");
        int element = scanner.nextInt();

        int index = linearSearch(arr, element);

        if (index != -1) {
            System.out.println("Element " + element + " found at index " + index + ".");
        } else {
            System.out.println("Element not found in array.");
        }
    }

    // Linear search method
    public static int linearSearch(int[] arr, int x) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                return i;
            }
        }
        return -1;
    }
}

Q2. Given an array and an integer “target”, return the last occurrence of “target” in the array. If the target is
not present return -1.
Input 1: arr = [1 1 1 2 3 4 4 5 6 6 6 6] , target = 4
Output 1: 6
Input 2: arr = [2 2 2 6 6 18 29 30 30 30] , target = 15
Output 2: -1
ANS:-public class LastOccurrence {
    public static int lastOccurrence(int[] arr, int target) {
        /**
         * Returns the last occurrence of `target` in `arr`. If `target` is not present, returns -1.
         */
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 1, 1, 2, 3, 4, 4, 5, 6, 6, 6, 6};
        int target1 = 4;
        System.out.println("Output 1: " + lastOccurrence(arr1, target1)); // Output 1: 6

        int[] arr2 = {2, 2, 2, 6, 6, 18, 29, 30, 30, 30};
        int target2 = 15;
        System.out.println("Output 2: " + lastOccurrence(arr2, target2)); // Output 2: -1
    }
}
Q3. Given a sorted binary array, efficiently count the total number of 1’s in it.
Input 1: arr = [0 0 0 0 1 1 1 1 1 1]
Output 1: 6
Input 2: arr = [ 0 0 0 0 0 1 1]
Output 2: 2
ANS:-public class CountOnes {
    public static int countOnes(int[] arr) {
        /**
         * Efficiently counts the total number of 1's in the sorted binary array `arr`.
         */
        int left = 0;
        int right = arr.length - 1;

        // Find the first index of 1 (left pointer)
        while (left <= right && arr[left] == 0) {
            left++;
        }

        // Find the last index of 1 (right pointer)
        while (left <= right && arr[right] == 1) {
            right--;
        }

        // Return the difference between the first and last index of 1
        return right - left + 1;
    }

    public static void main(String[] args) {
        int[] arr1 = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1};
        System.out.println("Output 1: " + countOnes(arr1)); // Output 1: 6

        int[] arr2 = {0, 0, 0, 0, 0, 1, 1};
        System.out.println("Output 2: " + countOnes(arr2)); // Output 2: 2
    }
}
Q4. Given a sorted integer array containing duplicates, count occurrences of a given number. If the element
is not found in the array, report that as well.
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 5
Output: Target 5 occurs 3 times
Input: nums[] = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]
target = 6
Output: Target 6 occurs 2 times
ANS:-public class CountOccurrences {
    public static void countTargetOccurrences(int[] nums, int target) {
        /**
         * Counts the occurrences of the `target` in the sorted integer array `nums` containing duplicates.
         * If the target is not found, reports that as well.
         */
        int left = 0;
        int right = nums.length - 1;
        int count = 0;

        // Find the first index of target (left pointer)
        while (left <= right && nums[left] < target) {
            left++;
        }

        // Find the last index of target (right pointer)
        while (left <= right && nums[right] == target) {
            count++;
            right--;
        }

        // Check if the target is found
        if (count > 0) {
            System.out.println("Target " + target + " occurs " + count + " times");
        } else {
            System.out.println("Target " + target + " is not found in the array");
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {2, 5, 5, 5, 6, 6, 8, 9, 9, 9};
        int target1 = 5;
        countTargetOccurrences(nums1, target1); // Output: Target 5 occurs 3 times

        int[] nums2 = {2, 5, 5, 5, 6, 6, 8, 9, 9, 9};
        int target2 = 6;
        countTargetOccurrences(nums2, target2); // Output: Target 6 occurs 2 times

        int[] nums3 = {2, 5, 5, 5, 6, 6, 8, 9, 9, 9};
        int target3 = 4;
        countTargetOccurrences(nums3, target3); // Output: Target 4 is not found in the array
    }
}
Q5: Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer
with itself.
Example 1:
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
Example 2:
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.
ANS:-public class PerfectSquare {
    public static boolean isPerfectSquare(int num) {
        /**
         * Returns true if the given positive integer `num` is a perfect square, and false otherwise.
         */
        if (num < 1) {
            throw new IllegalArgumentException("Input must be a positive integer");
        }

        int left = 1;
        int right = num;

        // Binary search to find the square root
        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (mid * mid == num) {
                return true;
            } else if (mid * mid < num) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int num1 = 16;
        System.out.println("Example 1: " + isPerfectSquare(num1)); // Output: true

        int num2 = 14;
        System.out.println("Example 2: " + isPerfectSquare(num2)); // Output: false
    }
}